#blocker {
    position: fixed;
    width: 1000px;
    height: 1000px;
    background-color: rgba(14, 1, 38, 0.789);
    color: white;
    font-family: "Serif", "Georgia", monospace;
}

#instructions {
    position: fixed;
    width: 1000px;
    height: 1000px;
    margin: 0px;

    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    text-align: center;
    top: -80%;
    font-size: 25px;
    font-family: "Serif", "Georgia", monospace;
    cursor: pointer;
    
}



.dropbtn {
    min-width: 160px;
    background-color: #F3DEFF;
    color: black;
    padding: 16px;
    font-size: 25px;
    border: none;
    cursor: pointer;
    position: fixed;
    left: 35%;
    top: 65%;
    font-family: "Serif", "Georgia", monospace;
}

.button {
    min-width: 160px;
    background-color: #F3DEFF;
    color: black;
    padding: 16px;
    font-size: 25px;
    border: none;
    cursor: pointer;
    position: fixed;
    left: 55%;
    top: 65%;
    font-family: "Serif", "Georgia", monospace;
}

.unPauseButton {
    min-width: 160px;
    background-color: #F3DEFF;
    color: black;
    padding: 16px;
    font-size: 25px;
    border: none;
    cursor: pointer;
    position: fixed;
    left: 55%;
    top: 65%;
    font-family: "Serif", "Georgia", monospace;
}


.greenText {
    min-width: 160px;
    color: black;
    padding: 16px;
    font-size: 25px;
    border: none;
    cursor: pointer;
    position: fixed;
    left: 35%;
    top: 65%;
    font-family: "Serif", "Georgia", monospace;
    background-color: green;
}

.blueText {
    min-width: 160px;

    color: black;
    padding: 16px;
    font-size: 25px;
    border: none;
    cursor: pointer;
    position: fixed;
    left: 35%;
    top: 65%;
    font-family: "Serif", "Georgia", monospace;
    background-color: rgb(255, 191, 0);
}

.redText {
    min-width: 160px;
    color: black;
    padding: 16px;
    font-size: 25px;
    border: none;
    cursor: pointer;
    position: fixed;
    left: 35%;
    top: 65%;
    font-family: "Serif", "Georgia", monospace;
    background-color: red;
}

.greyText {
    min-width: 160px;
    color: black;
    padding: 16px;
    font-size: 25px;
    border: none;
    cursor: pointer;
    position: fixed;
    left: 35%;
    top: 65%;
    font-family: "Serif", "Georgia", monospace;
    background-color: rgba(97, 89, 89, 0.637);
}




<html>

<head>
    <title>Final Project</title>
    <link href="styling.css" rel="stylesheet">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <!-- <link type="text/css" rel="stylesheet" href="main.css"> -->
</head>

<!-- Zara Masino & Brianna Van Hecke -->
<!-- We did the head bob & made the user casts a shadow  -->

<div id="blocker">
    <div id="instructions">
        <p style="font-size:80px">
            Monster Bash
        </p>
        <p style="font-size:20px">
            Instructions<br />
            <br />
            More Instructions
        </p>
    </div>
</div>

<div class="dropdown" , id="gameControls">
    <div id="selectbutton">
        <select class="dropbtn" name="difficulty" id="selectButton2"
            onchange="this.className=this.options[this.selectedIndex].className" class="greenText">>
            <option class="greyText" disabled="disabled" selected="selected">Choose Difficulty</option>
            <option value="easy" class="greenText" value="easy">Easy</option>
            <option value="medium" class="blueText" value="medium">Medium</option>
            <option value="hard" class="redText" value="hard">Hard</option>
        </select>
    </div>
    <div id="button">
        <button class="button">Start</button>
    </div>

</div>

<div id="unpause" , style="display:none">
    <button class="unPauseButton">UnPause</button>
</div>

<body>


    <canvas id="myCanvas" width="800" height="800"></canvas>
    <script src="Perlin.js"></script>
    <script src="/declarations.js"></script>
    <script src="/functions.js"></script>
    <script type="module">

        //Imports
        import * as THREE from "http://cs.merrimack.edu/~stuetzlec/three.js-master/build/three.module.js";
        import { PointerLockControls } from 'http://cs.merrimack.edu/~stuetzlec/three.js-master/examples/jsm/controls/PointerLockControls.js';
        import { LightningStrike } from 'http://cs.merrimack.edu/~stuetzlec/three.js-master/examples/jsm/geometries/LightningStrike.js';
        import { LightningStorm } from 'http://cs.merrimack.edu/~stuetzlec/three.js-master/examples/jsm/objects/LightningStorm.js';


        //Variable Declaration
        import { OutlinePass } from 'http://cs.merrimack.edu/~stuetzlec/three.js-master/examples/jsm/postprocessing/OutlinePass.js'
        import { RenderPass } from 'http://cs.merrimack.edu/~stuetzlec/three.js-master/examples/jsm/postprocessing/RenderPass.js'
        import { EffectComposer } from 'http://cs.merrimack.edu/~stuetzlec/three.js-master/examples/jsm/postprocessing/EffectComposer.js'
        import { UnrealBloomPass } from 'http://cs.merrimack.edu/~stuetzlec/three.js-master/examples/jsm/postprocessing/UnrealBloomPass.js';
        import { GLTFLoader } from 'http://cs.merrimack.edu/~stuetzlec/three.js-master/examples/jsm/loaders/GLTFLoader.js';

        import { FlakesTexture } from 'http://cs.merrimack.edu/~stuetzlec/three.js-master/examples/jsm/textures/FlakesTexture.js';
        import { RGBELoader } from 'http://cs.merrimack.edu/~stuetzlec/three.js-master/examples/jsm/loaders/RGBELoader.js';



        //Variable Declaration




        let scene = new THREE.Scene();
        let windowWidth = window.innerWidth;
        let windowHeight = window.innerHeight;
        var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);
        camera.lookAt(new THREE.Vector3(0.0, 0.0, 0.0));
        camera.position.set(0, 80, 10);

        scene.add(camera);


        var hudCanvas = document.createElement('canvas');
        // Again, set dimensions to fit the screen.
        hudCanvas.width = windowWidth;
        hudCanvas.height = windowHeight;
        var cameraHUD = new THREE.OrthographicCamera(-windowWidth / 2, windowWidth / 2, windowHeight / 2, -windowHeight / 2, 0, 30);
        cameraHUD.layers.enable(1);
        // Create also a custom scene for HUD.
        let sceneHUD = new THREE.Scene();
        // Create texture from rendered graphics.
        var hudTexture = new THREE.Texture(hudCanvas)
        hudTexture.needsUpdate = true;
        // Create HUD material.
        var material = new THREE.MeshBasicMaterial({ map: hudTexture });
        material.transparent = true;
        // Create plane to render the HUD. This plane fill the whole screen.
        var planeGeometry = new THREE.PlaneGeometry(windowWidth, windowHeight);
        var plane = new THREE.Mesh(planeGeometry, material);
        sceneHUD.add(plane);



        let perlin = new Perlin(); // used for terrain generation
        let loader = new THREE.TextureLoader(); //Texture loader
        let raycaster = new THREE.Raycaster();

        // used in terrain generation
        let peak = 30;
        let smoothing = 200;

        const GROUND_SIZE = 1000;
        const ground = new THREE.Mesh(new THREE.PlaneGeometry(GROUND_SIZE, GROUND_SIZE), new THREE.MeshLambertMaterial({ color: 0x072302 }));
        ground.rotation.x = - Math.PI * 0.5;




        let clock = new THREE.Clock();
        let controls = new PointerLockControls(camera, document.body); //Enables pointerlock controls


        let humanGroup = new THREE.Group(); // used for the body
        let monsterGroup = new THREE.Group(); // used for the body

        let previousPos = [];
        previousPos.push(new THREE.Vector3(camera.position.x, camera.position.y, camera.position.z));

        // game logic
        let heartPositions = [windowWidth - (windowWidth * .78), windowWidth - (windowWidth * .81), windowWidth - (windowWidth * .84)];


        let wood = new THREE.MeshPhongMaterial({ color: 0x80471C, map: loader.load("trees/oakwood.jpg") });


        let renderer = new THREE.WebGLRenderer({ canvas: myCanvas, antialias: true });
        renderer.setClearColor(0xADD8E6);//Sets color of renderer
        renderer.setPixelRatio(document.getElementById('myCanvas').devicePixelRatio); //Sets renderer to the canvas
        renderer.setSize(window.innerWidth, window.innerHeight); //Specifies how much of screen will be rendererd
        renderer.autoClear = false;
        document.body.appendChild(renderer.domElement);
        renderer.shadowMap.enabled = true; //Enables shadow map
        renderer.shadowMapSoft = true; //Specifies type of shadow
        renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        // renderer.outputEncoding = THREE.sRGBEncoding;
        // renderer.toneMapping = THREE.ACESFilmicToneMapping;
        // renderer.toneMappingExposure = 1.25;

        let composer = new EffectComposer(renderer);


        // let bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85)
        // bloomPass.threshold = 0.21;
        // bloomPass.strength = 1.2;
        // bloomPass.radius = 0.55;
        // bloomPass.renderToScreen = true;

        // let renderScene = new RenderPass(sceneHUD, camera);

        //composer.addPass(renderScene)
        //composer.addPass(bloomPass)


        document.getElementById("button").onclick = function () {
            gamePaused = false;
            instructions.style.display = 'none';
            blocker.style.display = 'none';
            gameControls.style.display = 'none';
            var e = document.getElementById("selectButton2");
            console.log(e);
            function onChange() {
                level = e.value;
                console.log(level);
            }
            e.onchange = onChange;
            onChange();

            initParameters(level);


            controls.lock(); //Locks pointerlock controls upon the user clicking
            animate();
        };


        document.getElementById("unpause").onclick = function () {
            gamePaused = false;
            blocker.style.display = 'none';
            unpause.style.display = 'none';
            controls.lock(); //Locks pointerlock controls upon the user clicking
            animate();
        };


        document.addEventListener('keydown', onDocumentKeyDown, false); //Adds key handler to the document

        //If the user has not pressed any keys then the boolean determining whether the user is moving should be turned to false
        document.addEventListener('keyup', (event) => {
            moving = false;
        });


        controls.addEventListener('unlock', function () {
            heartbeatAudio.pause();
            heartbeatAudio.currentTime = 0;
            gamePaused = true;
            blocker.style.display = 'block';
            setTimeout(() => {
            unpause.style.display = 'block';
            }, 1000)
            //instructions.style.display = '';
            controls.unlock();

        });

        let addShiba = false;